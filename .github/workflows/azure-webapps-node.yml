name: "Platform CD - Terraform, Docker, and Kubernetes Actions"

on:
  schedule:
    # Run from Monday to Friday at 6:00 AM
    - cron: "0 6 * * 1-5"
  workflow_dispatch:
    inputs:
      actions:
        description: "Action Options"
        default: "terraform"
        type: choice
        options:
          - terraform
      option:
        description: "Terraform option"
        default: "apply"
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: "Environment to deploy applications to"
        default: "qa"
        type: choice
        options:
          - dev
          - qa

permissions: 
  id-token: write
  contents: read

env:
  CLUSTER_NAME: "aks-lgtm-${{ github.event.inputs.environment }}"
  RESOURCE_GROUP: "${{ vars.RESOURCE_GROUP }}"

jobs:
  terraform-execute:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    env:
      ARM_TENANT_ID : ${{ vars.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID : ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID : ${{ vars.AZURE_MI_CLIENT_ID }}
      TF_VERSION: 1.7.4
      RESOURCE_GROUP: ${{ vars.TF_RESOURCE_GROUP }}
      STORAGE_ACCOUNT: ${{ vars.TF_STORAGE_ACCOUNT }}
      STORAGE_SECRET: ${{ secrets.TF_STORAGE_SECRET }}
      CONTAINER_NAME: ${{ vars.TF_CONTAINER_NAME }}
      STATE_KEY: ${{ vars.TF_STATE_KEY }}
      GIT_TOKEN: ${{ secrets.GH_TOKEN }}
      GITRUNNER_TOKEN: ${{ secrets.RUNNER_REGISTRATION_TOKEN }}
    outputs:
      ACR_REPO: ${{ steps.tf-output.outputs.ACR_REPO }}
      ACR_USER: ${{ steps.tf-output.outputs.ACR_USER }}
      ACR_PASS: ${{ steps.tf-output.outputs.ACR_PASSWORD }}
      POSTGRES_PASSWORD: ${{ steps.tf-output.outputs.POSTGRES_PASSWORD }}
      public_ip_address: ${{ steps.tf-output.outputs.public_ip_address }}
      POSTGRES_FQDN: ${{ steps.tf-output.outputs.POSTGRES_FQDN }}
      COSMOSDB_ACCESSKEY: ${{ steps.tf-output.outputs.COSMOSDB_ACCESSKEY }}
      COSMOSDB_URI: ${{ steps.tf-output.outputs.COSMOSDB_URI }}

    defaults:
      run:
        shell: bash
        working-directory: infra
    environment: "${{ github.event.inputs.environment }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: 'Authenticate to Azure'
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
  
      - name: Terraform init
        id: init
        run: terraform init -backend-config="resource_group_name=${{ env.RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT }}" -backend-config="container_name=${{env.CONTAINER_NAME}}" -backend-config="key=${{env.STATE_KEY}}" -backend-config="access_key=${{env.STORAGE_SECRET}}"

      - name: Terraform plan
        id: tf-plan
        if: "${{ github.event.inputs.option == 'plan' }}"
        run: terraform ${{ github.event.inputs.option }} --var-file=${{ github.event.inputs.environment }}.tfvars -var="runner_token=${{env.GITRUNNER_TOKEN}}" -no-color -input=false
  
      - name: Terraform ${{ github.event.inputs.option }}
        id: tf-execute
        if: "${{ github.event.inputs.option == 'apply' || github.event.inputs.option == 'destroy' }}"
        run: terraform ${{ github.event.inputs.option }} --var-file=${{ github.event.inputs.environment }}.tfvars -var="runner_token=${{env.GITRUNNER_TOKEN}}" -auto-approve -input=false

      - name: Terraform output
        id: tf-output
        if: "${{ github.event.inputs.option == 'apply' }}"
        run: |
          repo=$(terraform output -raw acr_login_server)
          user=$(terraform output -raw acr_admin_username)
          pass=$(terraform output -raw acr_admin_password)
          public_ip=$(terraform output -raw public_ip_address)
          postgres_password=$(terraform output -raw db_password)
          cosmosdb_accesskey=$(terraform output -raw cosmosdb_accesskey)
          cosmosdb_uri=$(terraform output -raw cosmosdb_uri)
          POSTGRES_FQDN_tf=$(terraform output -raw postgres_fqdn)

          echo "ACR_REPO=$repo" >> "$GITHUB_OUTPUT"
          echo "ACR_USER=$user" >> "$GITHUB_OUTPUT"
          echo "ACR_PASSWORD=$pass" >> "$GITHUB_OUTPUT"
          echo "POSTGRES_PASSWORD=$postgres_password" >> "$GITHUB_OUTPUT"
          echo "COSMOSDB_ACCESSKEY=$(echo -n $cosmosdb_accesskey | base64 -w 0)" >> "$GITHUB_OUTPUT"
          echo "COSMOSDB_URI=$cosmosdb_uri" >> "$GITHUB_OUTPUT"
          echo "POSTGRES_FQDN=$POSTGRES_FQDN_tf" >> "$GITHUB_OUTPUT"
          echo "public_ip_address=$public_ip" >> "$GITHUB_OUTPUT"

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform-execute
    environment: "${{ github.event.inputs.environment }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ needs.terraform-execute.outputs.ACR_REPO }}
          username: ${{ needs.terraform-execute.outputs.ACR_USER }}
          password: ${{ needs.terraform-execute.outputs.ACR_PASS }}

      - name: Build Docker image
        run: |
          docker build -t ${{ needs.terraform-execute.outputs.ACR_REPO }}/my-app:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push ${{ needs.terraform-execute.outputs.ACR_REPO }}/my-app:${{ github.sha }}

  kubernetes-deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: docker-build-push
    environment: "${{ github.event.inputs.environment }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Authenticate to Azure AKS
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.RESOURCE_GROUP }}

      - name: Deploy to AKS
        run: |
          kubectl set image deployment/my-app my-app=${{ needs.terraform-execute.outputs.ACR_REPO }}/my-app:${{ github.sha }}
